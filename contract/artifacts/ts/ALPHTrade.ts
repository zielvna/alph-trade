/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as ALPHTradeContractJson } from "../ALPHTrade.ral.json";
import { getContractByCodeHash } from "./contracts";
import { OracleValue, Position, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace ALPHTradeTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    supply: bigint;
    usdcId: HexString;
    oracleId: HexString;
    admin: Address;
    marketsIndex: bigint;
    balance: bigint;
    liquidity: bigint;
    longPositionsSize: bigint;
    shortPositionsSize: bigint;
    positionsIndex: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    balance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getUsdcId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getLpId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    addMarket: {
      params: CallContractParams<{ ticker: HexString }>;
      result: CallContractResult<null>;
    };
    removeMarket: {
      params: CallContractParams<{ ticker: HexString }>;
      result: CallContractResult<null>;
    };
    getMarkets: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<
        [
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString
        ]
      >;
    };
    deposit: {
      params: CallContractParams<{ usdcAmount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ lpAmount: bigint }>;
      result: CallContractResult<null>;
    };
    openPosition: {
      params: CallContractParams<{
        market: HexString;
        type: bigint;
        colateral: bigint;
        leverage: bigint;
      }>;
      result: CallContractResult<null>;
    };
    closePosition: {
      params: CallContractParams<{ positionIndex: bigint }>;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: CallContractParams<{ positionIndex: bigint }>;
      result: CallContractResult<null>;
    };
    getPosition: {
      params: CallContractParams<{ positionIndex: bigint }>;
      result: CallContractResult<Position>;
    };
    getPositions: {
      params: CallContractParams<{ address: Address }>;
      result: CallContractResult<
        [
          [
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position
          ],
          [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ]
        ]
      >;
    };
    calculateValue: {
      params: CallContractParams<{ position: Position }>;
      result: CallContractResult<bigint>;
    };
    getPrice: {
      params: CallContractParams<{
        market: HexString;
        type: bigint;
        isOpenPrice: boolean;
      }>;
      result: CallContractResult<bigint>;
    };
    getAllPositions: {
      params: CallContractParams<{ offset: bigint }>;
      result: CallContractResult<
        [
          [
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position
          ],
          [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ],
          bigint
        ]
      >;
    };
    getValue: {
      params: CallContractParams<{ key: HexString }>;
      result: CallContractResult<OracleValue>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDecimals: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    balance: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUsdcId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLpId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    addMarket: {
      params: SignExecuteContractMethodParams<{ ticker: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    removeMarket: {
      params: SignExecuteContractMethodParams<{ ticker: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getMarkets: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{ usdcAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{ lpAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    openPosition: {
      params: SignExecuteContractMethodParams<{
        market: HexString;
        type: bigint;
        colateral: bigint;
        leverage: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    closePosition: {
      params: SignExecuteContractMethodParams<{ positionIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: SignExecuteContractMethodParams<{ positionIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getPosition: {
      params: SignExecuteContractMethodParams<{ positionIndex: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getPositions: {
      params: SignExecuteContractMethodParams<{ address: Address }>;
      result: SignExecuteScriptTxResult;
    };
    calculateValue: {
      params: SignExecuteContractMethodParams<{ position: Position }>;
      result: SignExecuteScriptTxResult;
    };
    getPrice: {
      params: SignExecuteContractMethodParams<{
        market: HexString;
        type: bigint;
        isOpenPrice: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getAllPositions: {
      params: SignExecuteContractMethodParams<{ offset: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getValue: {
      params: SignExecuteContractMethodParams<{ key: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  ALPHTradeInstance,
  ALPHTradeTypes.Fields
> {
  encodeFields(fields: ALPHTradeTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = {
    TOKEN_DENOMINATOR: BigInt("1000000"),
    PRICE_DENOMINATOR: BigInt("1000000000"),
    MIN_COLATERAL: BigInt("1000000"),
    MIN_LEVERAGE: BigInt("2"),
    MAX_LEVERAGE: BigInt("20"),
    LIQUIDATION_TRESHOLD_NOMINATOR: BigInt("1"),
    LIQUIDATION_TRESHOLD_DENOMINATOR: BigInt("6"),
    LIQUIDATION_FEE_NOMINATOR: BigInt("1"),
    LIQUIDATION_FEE_DENOMINATOR: BigInt("100"),
    Error: {
      InvalidPositionType: BigInt("0"),
      InvalidLeverage: BigInt("1"),
      NotAnOwner: BigInt("2"),
      NotEnoughLiquidity: BigInt("3"),
      PositionValueAboveLiquidationThreshold: BigInt("4"),
      NotEnoughColateral: BigInt("5"),
      NotAnAdmin: BigInt("6"),
      MarketDoesNotExist: BigInt("7"),
    },
    PositionType: { Long: BigInt("0"), Short: BigInt("1") },
  };

  at(address: string): ALPHTradeInstance {
    return new ALPHTradeInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        HexString,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        HexString,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDecimals: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        bigint,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getDecimals", params, getContractByCodeHash);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        bigint,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getTotalSupply", params, getContractByCodeHash);
    },
    balance: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        bigint,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "balance", params, getContractByCodeHash);
    },
    getUsdcId: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        HexString,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getUsdcId", params, getContractByCodeHash);
    },
    getLpId: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        HexString,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getLpId", params, getContractByCodeHash);
    },
    addMarket: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { ticker: HexString },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "addMarket", params, getContractByCodeHash);
    },
    removeMarket: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { ticker: HexString },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "removeMarket", params, getContractByCodeHash);
    },
    getMarkets: async (
      params: Omit<
        TestContractParams<
          ALPHTradeTypes.Fields,
          never,
          {
            positions?: Map<bigint, Position>;
            markets?: Map<bigint, HexString>;
          }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        [
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString
        ],
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getMarkets", params, getContractByCodeHash);
    },
    containsMarket: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { ticker: HexString },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        boolean,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "containsMarket", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { usdcAmount: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { lpAmount: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    openPosition: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        {
          market: HexString;
          type: bigint;
          colateral: bigint;
          leverage: bigint;
        },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "openPosition", params, getContractByCodeHash);
    },
    closePosition: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { positionIndex: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "closePosition", params, getContractByCodeHash);
    },
    liquidate: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { positionIndex: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
    getPosition: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { positionIndex: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        Position,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getPosition", params, getContractByCodeHash);
    },
    getPositions: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { address: Address },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        [
          [
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position
          ],
          [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ]
        ],
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getPositions", params, getContractByCodeHash);
    },
    addPosition: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { caller: Address; position: Position },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "addPosition", params, getContractByCodeHash);
    },
    removePosition: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { positionIndex: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        null,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "removePosition", params, getContractByCodeHash);
    },
    calculateValue: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { position: Position },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        bigint,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "calculateValue", params, getContractByCodeHash);
    },
    getPrice: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { market: HexString; type: bigint; isOpenPrice: boolean },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        bigint,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getPrice", params, getContractByCodeHash);
    },
    getAllPositions: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { offset: bigint },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        [
          [
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position,
            Position
          ],
          [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ],
          bigint
        ],
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getAllPositions", params, getContractByCodeHash);
    },
    getValue: async (
      params: TestContractParams<
        ALPHTradeTypes.Fields,
        { key: HexString },
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    ): Promise<
      TestContractResult<
        OracleValue,
        { positions?: Map<bigint, Position>; markets?: Map<bigint, HexString> }
      >
    > => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const ALPHTrade = new Factory(
  Contract.fromJson(
    ALPHTradeContractJson,
    "=28-9=1+c=1-1=1+e5=1+82d=3-1+8=2-2+d5=2-2+25=1-2=1+c8=2-2+7d=2-4+49=1-1+b9c=2-1+a95=1+ee=1-4+3=2-1=2-1+c35=1+0c=1-2=1-2+02=1+a=1+9=165-1+8=72+7a7e0214696e73657274206174206d617020706174683a2000=36-2+80=53-1+f=93-1+7=52+7a7e021472656d6f7665206174206d617020706174683a2000=21-1+f=40+7a7e0214696e73657274206174206d617020706174683a2000=186+7a7e021472656d6f7665206174206d617020706174683a2000=36-2+8d=8091-1+2=40+7a7e0214696e73657274206174206d617020706174683a2000=48-2+84=224+7a7e021472656d6f7665206174206d617020706174683a2000=21-1+f=40+7a7e0214696e73657274206174206d617020706174683a2000=186+7a7e021472656d6f7665206174206d617020706174683a2000=3546",
    "304733ce343dad854f96db6768b29908ebe0c7912c774023cc6edffa9cbe0323",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class ALPHTradeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    positions: new RalphMap<bigint, Position>(
      ALPHTrade.contract,
      this.contractId,
      "positions"
    ),
    markets: new RalphMap<bigint, HexString>(
      ALPHTrade.contract,
      this.contractId,
      "markets"
    ),
  };

  async fetchState(): Promise<ALPHTradeTypes.State> {
    return fetchContractState(ALPHTrade, this);
  }

  view = {
    getSymbol: async (
      params?: ALPHTradeTypes.CallMethodParams<"getSymbol">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: ALPHTradeTypes.CallMethodParams<"getName">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getName">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: ALPHTradeTypes.CallMethodParams<"getDecimals">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: ALPHTradeTypes.CallMethodParams<"getTotalSupply">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    balance: async (
      params?: ALPHTradeTypes.CallMethodParams<"balance">
    ): Promise<ALPHTradeTypes.CallMethodResult<"balance">> => {
      return callMethod(
        ALPHTrade,
        this,
        "balance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUsdcId: async (
      params?: ALPHTradeTypes.CallMethodParams<"getUsdcId">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getUsdcId">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getUsdcId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLpId: async (
      params?: ALPHTradeTypes.CallMethodParams<"getLpId">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getLpId">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getLpId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    addMarket: async (
      params: ALPHTradeTypes.CallMethodParams<"addMarket">
    ): Promise<ALPHTradeTypes.CallMethodResult<"addMarket">> => {
      return callMethod(
        ALPHTrade,
        this,
        "addMarket",
        params,
        getContractByCodeHash
      );
    },
    removeMarket: async (
      params: ALPHTradeTypes.CallMethodParams<"removeMarket">
    ): Promise<ALPHTradeTypes.CallMethodResult<"removeMarket">> => {
      return callMethod(
        ALPHTrade,
        this,
        "removeMarket",
        params,
        getContractByCodeHash
      );
    },
    getMarkets: async (
      params?: ALPHTradeTypes.CallMethodParams<"getMarkets">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getMarkets">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getMarkets",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: ALPHTradeTypes.CallMethodParams<"deposit">
    ): Promise<ALPHTradeTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        ALPHTrade,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: ALPHTradeTypes.CallMethodParams<"withdraw">
    ): Promise<ALPHTradeTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        ALPHTrade,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    openPosition: async (
      params: ALPHTradeTypes.CallMethodParams<"openPosition">
    ): Promise<ALPHTradeTypes.CallMethodResult<"openPosition">> => {
      return callMethod(
        ALPHTrade,
        this,
        "openPosition",
        params,
        getContractByCodeHash
      );
    },
    closePosition: async (
      params: ALPHTradeTypes.CallMethodParams<"closePosition">
    ): Promise<ALPHTradeTypes.CallMethodResult<"closePosition">> => {
      return callMethod(
        ALPHTrade,
        this,
        "closePosition",
        params,
        getContractByCodeHash
      );
    },
    liquidate: async (
      params: ALPHTradeTypes.CallMethodParams<"liquidate">
    ): Promise<ALPHTradeTypes.CallMethodResult<"liquidate">> => {
      return callMethod(
        ALPHTrade,
        this,
        "liquidate",
        params,
        getContractByCodeHash
      );
    },
    getPosition: async (
      params: ALPHTradeTypes.CallMethodParams<"getPosition">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getPosition">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getPosition",
        params,
        getContractByCodeHash
      );
    },
    getPositions: async (
      params: ALPHTradeTypes.CallMethodParams<"getPositions">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getPositions">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getPositions",
        params,
        getContractByCodeHash
      );
    },
    calculateValue: async (
      params: ALPHTradeTypes.CallMethodParams<"calculateValue">
    ): Promise<ALPHTradeTypes.CallMethodResult<"calculateValue">> => {
      return callMethod(
        ALPHTrade,
        this,
        "calculateValue",
        params,
        getContractByCodeHash
      );
    },
    getPrice: async (
      params: ALPHTradeTypes.CallMethodParams<"getPrice">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getPrice">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getPrice",
        params,
        getContractByCodeHash
      );
    },
    getAllPositions: async (
      params: ALPHTradeTypes.CallMethodParams<"getAllPositions">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getAllPositions">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getAllPositions",
        params,
        getContractByCodeHash
      );
    },
    getValue: async (
      params: ALPHTradeTypes.CallMethodParams<"getValue">
    ): Promise<ALPHTradeTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        ALPHTrade,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getSymbol: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(ALPHTrade, this, "getSymbol", params);
    },
    getName: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getName">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(ALPHTrade, this, "getName", params);
    },
    getDecimals: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getDecimals">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getDecimals">> => {
      return signExecuteMethod(ALPHTrade, this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getTotalSupply">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getTotalSupply">> => {
      return signExecuteMethod(ALPHTrade, this, "getTotalSupply", params);
    },
    balance: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"balance">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"balance">> => {
      return signExecuteMethod(ALPHTrade, this, "balance", params);
    },
    getUsdcId: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getUsdcId">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getUsdcId">> => {
      return signExecuteMethod(ALPHTrade, this, "getUsdcId", params);
    },
    getLpId: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getLpId">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getLpId">> => {
      return signExecuteMethod(ALPHTrade, this, "getLpId", params);
    },
    addMarket: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"addMarket">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"addMarket">> => {
      return signExecuteMethod(ALPHTrade, this, "addMarket", params);
    },
    removeMarket: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"removeMarket">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"removeMarket">> => {
      return signExecuteMethod(ALPHTrade, this, "removeMarket", params);
    },
    getMarkets: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getMarkets">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getMarkets">> => {
      return signExecuteMethod(ALPHTrade, this, "getMarkets", params);
    },
    deposit: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"deposit">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(ALPHTrade, this, "deposit", params);
    },
    withdraw: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(ALPHTrade, this, "withdraw", params);
    },
    openPosition: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"openPosition">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"openPosition">> => {
      return signExecuteMethod(ALPHTrade, this, "openPosition", params);
    },
    closePosition: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"closePosition">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"closePosition">> => {
      return signExecuteMethod(ALPHTrade, this, "closePosition", params);
    },
    liquidate: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(ALPHTrade, this, "liquidate", params);
    },
    getPosition: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getPosition">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getPosition">> => {
      return signExecuteMethod(ALPHTrade, this, "getPosition", params);
    },
    getPositions: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getPositions">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getPositions">> => {
      return signExecuteMethod(ALPHTrade, this, "getPositions", params);
    },
    calculateValue: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"calculateValue">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"calculateValue">> => {
      return signExecuteMethod(ALPHTrade, this, "calculateValue", params);
    },
    getPrice: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getPrice">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getPrice">> => {
      return signExecuteMethod(ALPHTrade, this, "getPrice", params);
    },
    getAllPositions: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getAllPositions">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getAllPositions">> => {
      return signExecuteMethod(ALPHTrade, this, "getAllPositions", params);
    },
    getValue: async (
      params: ALPHTradeTypes.SignExecuteMethodParams<"getValue">
    ): Promise<ALPHTradeTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(ALPHTrade, this, "getValue", params);
    },
  };

  async multicall<Callss extends ALPHTradeTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<ALPHTradeTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      ALPHTrade,
      this,
      callss,
      getContractByCodeHash
    )) as ALPHTradeTypes.MulticallReturnType<Callss>;
  }
}
