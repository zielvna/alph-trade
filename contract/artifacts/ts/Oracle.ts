/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as OracleContractJson } from "../Oracle.ral.json";
import { getContractByCodeHash } from "./contracts";
import { OracleValue, AllStructs } from "./types";

// Custom types for the contract
export namespace OracleTypes {
  export type Fields = {
    btcPrice: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    setValue: {
      params: CallContractParams<{ key: HexString; value: bigint }>;
      result: CallContractResult<null>;
    };
    getValue: {
      params: CallContractParams<{ key: HexString }>;
      result: CallContractResult<OracleValue>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    setValue: {
      params: SignExecuteContractMethodParams<{
        key: HexString;
        value: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getValue: {
      params: SignExecuteContractMethodParams<{ key: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<OracleInstance, OracleTypes.Fields> {
  encodeFields(fields: OracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): OracleInstance {
    return new OracleInstance(address);
  }

  tests = {
    setValue: async (
      params: TestContractParamsWithoutMaps<
        OracleTypes.Fields,
        { key: HexString; value: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setValue", params, getContractByCodeHash);
    },
    getValue: async (
      params: TestContractParamsWithoutMaps<
        OracleTypes.Fields,
        { key: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<OracleValue>> => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Oracle = new Factory(
  Contract.fromJson(
    OracleContractJson,
    "",
    "6ebf0205753b8d0204af27ef12c9d4f66cfd92aa84b0b753035382478ca723d3",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class OracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OracleTypes.State> {
    return fetchContractState(Oracle, this);
  }

  view = {
    setValue: async (
      params: OracleTypes.CallMethodParams<"setValue">
    ): Promise<OracleTypes.CallMethodResult<"setValue">> => {
      return callMethod(
        Oracle,
        this,
        "setValue",
        params,
        getContractByCodeHash
      );
    },
    getValue: async (
      params: OracleTypes.CallMethodParams<"getValue">
    ): Promise<OracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        Oracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    setValue: async (
      params: OracleTypes.SignExecuteMethodParams<"setValue">
    ): Promise<OracleTypes.SignExecuteMethodResult<"setValue">> => {
      return signExecuteMethod(Oracle, this, "setValue", params);
    },
    getValue: async (
      params: OracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<OracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(Oracle, this, "getValue", params);
    },
  };

  async multicall<Callss extends OracleTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<OracleTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      Oracle,
      this,
      callss,
      getContractByCodeHash
    )) as OracleTypes.MulticallReturnType<Callss>;
  }
}
