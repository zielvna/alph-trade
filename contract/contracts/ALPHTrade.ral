struct Position {
    mut owner: Address,
    mut market: ByteVec,
    mut type: U256,
    mut colateral: U256,
    mut leverage: U256,
    mut entryPrice: U256,
    mut entryTimestamp: U256
}

Contract ALPHTrade(
    symbol: ByteVec,
    name: ByteVec,
    decimals: U256,
    supply: U256,
    usdcId: ByteVec,
    oracleId: IOracle,
    admin: Address,
    mut marketsIndex: U256,
    mut balance: U256,
    mut liquidity: U256,
    mut longPositionsSize: U256,
    mut shortPositionsSize: U256,
    mut positionsIndex: U256
) implements IFungibleToken {
    mapping[U256, Position] positions
    mapping[U256, ByteVec] markets

    const TOKEN_DENOMINATOR = 10 ** 6
    const PRICE_DENOMINATOR = 10 ** 9
    const MIN_COLATERAL = TOKEN_DENOMINATOR
    const MIN_LEVERAGE = 2
    const MAX_LEVERAGE = 20
    const LIQUIDATION_TRESHOLD_NOMINATOR = 1i
    const LIQUIDATION_TRESHOLD_DENOMINATOR = 6i
    const LIQUIDATION_FEE_NOMINATOR = 1
    const LIQUIDATION_FEE_DENOMINATOR = 100

    enum Error {
        InvalidPositionType = 0
        InvalidLeverage = 1
        NotAnOwner = 2
        NotEnoughLiquidity = 3
        PositionValueAboveLiquidationThreshold = 4
        NotEnoughColateral = 5
        NotAnAdmin = 6
        MarketDoesNotExist = 7
    }

    enum PositionType {
        Long = 0
        Short = 1
    }

    pub fn getTotalSupply() -> U256 {
        return supply
    }

    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getDecimals() -> U256 {
        return decimals
    }

    pub fn balance() -> U256 {
        return balance
    }

    pub fn getUsdcId() -> ByteVec {
        return usdcId
    }

    pub fn getLpId() -> ByteVec {
        return selfTokenId!()
    }

    @using(preapprovedAssets = true, checkExternalCaller = true, updateFields = true)
    pub fn addMarket(ticker: ByteVec) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == admin, Error.NotAnAdmin)
        markets.insert!(caller, marketsIndex, ticker)
        marketsIndex = marketsIndex + 1
    }

    @using(checkExternalCaller = true, assetsInContract = enforced, updateFields = true)
    pub fn removeMarket(ticker: ByteVec) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == admin, Error.NotAnAdmin)
        
        for (let mut i = 0; i < marketsIndex; i = i + 1) {
            if(markets.contains!(i) && ticker == markets[i]) {
                let lastMarketsIndex = marketsIndex - 1

                markets.remove!(caller, i)
                if(i != lastMarketsIndex) {
                    positions.insert!(caller, i, positions[lastMarketsIndex])
                    positions.remove!(caller, lastMarketsIndex)
                }
                marketsIndex = marketsIndex - 1
                return
            }
        }

        assert!(false, Error.MarketDoesNotExist)
    }

    pub fn getMarkets() -> [ByteVec; 254] {
        let mut marketList = [#; 254]

        for(let mut i = 0; i < marketsIndex; i = i + 1) {
            if(markets.contains!(i)) {
                marketList[i] = markets[i]
            }
        }

        return marketList
    }

    fn containsMarket(ticker: ByteVec) -> Bool {
        for (let mut i = 0; i < marketsIndex; i = i + 1) {
            if(markets.contains!(i) && ticker == markets[i]) {
                return true
            }
        }

        return false
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn deposit(usdcAmount: U256) -> () {
        if(liquidity == 0) {
            liquidity = usdcAmount
            balance = balance - usdcAmount

            transferTokenToSelf!(callerAddress!(), usdcId, usdcAmount)
            transferTokenFromSelf!(callerAddress!(), selfTokenId!(), usdcAmount)
        } else {
            let lpAmount = usdcAmount * TOKEN_DENOMINATOR * (u256Max!() - balance) / liquidity / TOKEN_DENOMINATOR
            liquidity = liquidity + usdcAmount
            balance = balance - lpAmount

            transferTokenToSelf!(callerAddress!(), usdcId, usdcAmount)
            transferTokenFromSelf!(callerAddress!(), selfTokenId!(), lpAmount)
        }
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn withdraw(lpAmount: U256) -> () {
        let openInterest = longPositionsSize + shortPositionsSize
        let usdcAmount = lpAmount * TOKEN_DENOMINATOR * liquidity / (u256Max!() - balance) / TOKEN_DENOMINATOR
        assert!(usdcAmount <= liquidity - openInterest, Error.NotEnoughLiquidity)
        liquidity = liquidity - usdcAmount
        balance = balance + lpAmount

        transferTokenToSelf!(callerAddress!(), selfTokenId!(), lpAmount)
        transferTokenFromSelf!(callerAddress!(), usdcId, usdcAmount)
    }

    @using(preapprovedAssets = true, checkExternalCaller = false, payToContractOnly = true, updateFields = true)
    pub fn openPosition(market: ByteVec, type: U256, colateral: U256, leverage: U256) -> () {
        let caller = callerAddress!()
        let entryTimestamp = blockTimeStamp!()
        assert!(containsMarket(market), Error.MarketDoesNotExist)
        assert!(colateral >= MIN_COLATERAL, Error.NotEnoughColateral)
        assert!(type == PositionType.Long || type == PositionType.Short, Error.InvalidPositionType)
        assert!(leverage >= MIN_LEVERAGE && leverage <= MAX_LEVERAGE, Error.InvalidLeverage)
        let positionSize = colateral * leverage
        if (type == PositionType.Long) {
            assert!(longPositionsSize + positionSize <= liquidity / 2, Error.NotEnoughLiquidity)
        } else {
            assert!(shortPositionsSize + positionSize <= liquidity / 2, Error.NotEnoughLiquidity)
        }

        let entryPrice = getPrice(market, type, true)
        addPosition{caller -> ALPH: mapEntryDeposit!()}(caller, Position { owner: caller, market, type, colateral, leverage, entryPrice, entryTimestamp })
        positionsIndex = positionsIndex + 1
        if (type == PositionType.Long) {
            longPositionsSize = longPositionsSize + positionSize
        } else {
            shortPositionsSize = shortPositionsSize + positionSize
        }
        transferTokenToSelf!(caller, usdcId, colateral)
    }

    @using(assetsInContract = true, updateFields = true)
    pub fn closePosition(positionIndex: U256) -> () {
        let caller = callerAddress!()
        let position = positions[positionIndex]
        checkCaller!(caller == position.owner, Error.NotAnOwner)

        let value = calculateValue(position)
        liquidity = liquidity + position.colateral - toU256!(value)
        removePosition(positionIndex)
        positionsIndex = positionsIndex - 1
        let positionSize = position.colateral * position.leverage
        if (position.type == PositionType.Long) {
            longPositionsSize = longPositionsSize - positionSize
        } else {
            shortPositionsSize = shortPositionsSize - positionSize
        }
        transferTokenFromSelf!(caller, usdcId, toU256!(value))
    }

    @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
    pub fn liquidate(positionIndex: U256) -> () {
        let caller = callerAddress!()
        let position = positions[positionIndex]
        let mut value = calculateValue(position)
        if(value > 0i) {
            value = 0i
        }
        assert!(value <= toI256!(position.colateral) * LIQUIDATION_TRESHOLD_NOMINATOR / LIQUIDATION_TRESHOLD_DENOMINATOR, Error.PositionValueAboveLiquidationThreshold)

        let liquidationFee = position.colateral * LIQUIDATION_FEE_NOMINATOR / LIQUIDATION_FEE_DENOMINATOR
        liquidity = liquidity + position.colateral - toU256!(value) - liquidationFee
        removePosition(positionIndex)
        positionsIndex = positionsIndex - 1
        let positionSize = position.colateral * position.leverage
        if (position.type == PositionType.Long) {
            longPositionsSize = longPositionsSize - positionSize
        } else {
            shortPositionsSize = shortPositionsSize - positionSize
        }
        transferTokenFromSelf!(caller, usdcId, liquidationFee)
    }

    pub fn getPosition(positionIndex: U256) -> Position {
        return positions[positionIndex]
    }

    pub fn getPositions(address: Address) -> ([Position; 31], [U256; 31]) {
        let mut userPositions = [Position { owner: nullContractAddress!(), market: #, type: 0, colateral: 0, leverage: 0, entryPrice: 0, entryTimestamp: 0 }; 31]
        let mut indexes = [0; 31]
        let mut i = 0

        for (let mut j = 0; j < positionsIndex; j = j + 1) {
            if (positions.contains!(j) && positions[j].owner == address) {
                userPositions[i] = positions[j]
                indexes[i] = j
                i = i + 1
            }
        }
        
        return userPositions, indexes
    }

    @using(preapprovedAssets = true)
    fn addPosition(caller: Address, position: Position) -> () {
        positions.insert!(caller, positionsIndex, position)
    }

    @using(assetsInContract = enforced)
    fn removePosition(positionIndex: U256) -> () {
        let caller = callerAddress!()
        let position = positions[positionIndex]
        let lastPositionIndex = positionsIndex - 1

        positions.remove!(position.owner, positionIndex)
        if(positionIndex != lastPositionIndex) {
            positions.insert!(caller, positionIndex, positions[lastPositionIndex])
            positions.remove!(caller, lastPositionIndex)
        }
    }

    @using(checkExternalCaller = false)
    pub fn calculateValue(position: Position) -> I256 {
        let closeTimestamp = blockTimeStamp!()
        let timeDifference = closeTimestamp - position.entryTimestamp
        let hoursPassed = timeDifference / 3600000 + 1

        let hourlyBorrowCost = toI256!(position.colateral) * toI256!(position.leverage) * 5i / 100000i
        let valueAfterFees = toI256!(position.colateral) - hourlyBorrowCost * toI256!(hoursPassed)

        let closePrice = getPrice(position.market, position.type, false)

        let positionSize = toI256!(position.colateral * position.leverage)
        let priceDenominator = toI256!(PRICE_DENOMINATOR)
        if (position.type == PositionType.Long) {
            return (valueAfterFees * priceDenominator - (priceDenominator - toI256!(closePrice) * priceDenominator / toI256!(position.entryPrice)) * positionSize) / priceDenominator
        } else {
            return (valueAfterFees * priceDenominator - (toI256!(closePrice) * priceDenominator / toI256!(position.entryPrice) - priceDenominator) * positionSize) / priceDenominator
        }
    }

    @using(checkExternalCaller = false)
    pub fn getPrice(market: ByteVec, type: U256, isOpenPrice: Bool) -> U256 {
        let price = oracleId.getValue(market).value
        if ((type == PositionType.Long && isOpenPrice) || (type == PositionType.Short && !isOpenPrice)) {
            return price * 1005 / 1000
        } else {
            return price * 995 / 1000
        }
    }

    pub fn getAllPositions(offset: U256) -> ([Position; 31], [U256; 31], U256) {
        let mut userPositions = [Position { owner: nullContractAddress!(), market: #, type: 0, colateral: 0, leverage: 0, entryPrice: 0, entryTimestamp: 0 }; 31]
        let mut indexes = [0; 31]
        let mut i = 0

        for (let mut j = offset; j < positionsIndex; j = j + 1) {
            if (positions.contains!(j)) {
                userPositions[i] = positions[j]
                indexes[i] = j
                i = i + 1
            }
        }
        
        return userPositions, indexes, positionsIndex
    }
}